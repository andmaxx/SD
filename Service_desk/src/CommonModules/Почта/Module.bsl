////
//Функция НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма = Неопределено, ТекущийЭлементХТМЛ = Ложь, ПодписьПодТекстом = Истина, ОткрыватьПисьмо = Ложь) Экспорт

//	Перем УчетнаяЗапись;
//	Перем Тема;
//	Перем Тело;
//	Перем ВидТекста;
//	Перем СписокФайловВложений;
//	Перем ГруппаУчетнойЗаписи;
//	Перем Кому;
//	Перем Копии;
//	Перем СкрытыеКопии;
//	Перем Ответственный;
//	Перем ПредметКонтакта;
//	Перем КодировкаПисьма;
//	Перем ЗаявкаКандидата;
//	
//	Если СтруктураНовогоПисьма = Неопределено Тогда
//		СтруктураНовогоПисьма = Новый Структура;
//	КонецЕсли;
//	
//	// Определим учетную запись для создания письма
//	
//	//СписокДоступныхЗаписей = УправлениеЭлектроннойПочтой.ПроверитьУчетныеЗаписиДляОтправкиПисем(ТекущийПользователь);
//	//Если СписокДоступныхЗаписей.Количество() = 0 Тогда
//	//	Возврат Неопределено;
//	//КонецЕсли;
//	
//	СписокДоступныхЗаписей = ТекущийПользователь.EMail;
//	
//	СтруктураНовогоПисьма.Свойство("УчетнаяЗапись", УчетнаяЗапись);
//	Если ЗначениеЗаполнено(УчетнаяЗапись) И СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
//		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
//		УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяУчетнаяЗапись");
//		Если СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
//			УчетнаяЗапись = Неопределено;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
//		УчетнаяЗапись = СписокДоступныхЗаписей[0].Значение;
//	КонецЕсли;
//	
//	Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
//	Письмо.Дата								= ТекущаяДата();
//	Письмо.УчетнаяЗапись					= УчетнаяЗапись;
//	Письмо.ОтправительИмя					= УчетнаяЗапись.Наименование;
//	Письмо.ОтправительАдресЭлектроннойПочты	= УчетнаяЗапись.АдресЭлектроннойПочты;
//	Письмо.ОтправительПредставление			= УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
//	
//	СтруктураНовогоПисьма.Свойство("СписокФайловВложений", СписокФайловВложений);
//	
//	ОписаниеТиповПредмета = Новый ОписаниеТипов("Строка");
//	
//	СтруктураНовогоПисьма.Свойство("ВидТекста", ВидТекста);
//	
//	СтруктураНовогоПисьма.Свойство("КодировкаПисьма", КодировкаПисьма);
//	
//	Если Не ЗначениеЗаполнено(ВидТекста) Тогда
//		Письмо.ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
//		Если Не ЗначениеЗаполнено(Письмо.ВидТекстаПисьма) Тогда
//			Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
//		КонецЕсли;
//	Иначе
//		Письмо.ВидТекстаПисьма = ВидТекста;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(КодировкаПисьма) Тогда
//		Письмо.КодировкаПисьма = КодировкаПисьма;
//	Иначе
//		Письмо.КодировкаПисьма = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Тело", Тело);
//	Если ЗначениеЗаполнено(Тело) Тогда
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			Письмо.ТекстПисьма = "<HTML><HEAD>
//								 |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
//								 |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
//								 |<BODY><DIV>" + СтрЗаменить(Тело, Символы.ПС, "<BR>") + "</DIV></BODY></HTML>";
//			
//		Иначе
//			Письмо.ТекстПисьма = Тело;
//			
//		КонецЕсли;
//	Иначе
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			Письмо.ТекстПисьма = "<HTML><HEAD>
//								 |<META http-equiv=Content-Type content=""text/html; charset=" + ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
//								 |<META content=""MSHTML 6.00.2900.2912"" name=GENERATOR></HEAD>
//								 |<BODY><DIV></DIV></BODY></HTML>";
//			
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Тема", Тема);
//	Если ЗначениеЗаполнено(Тема) Тогда
//		Письмо.Тема = Тема;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
//	Если ЗначениеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
//		Письмо.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;
//	Иначе
//		Письмо.УказатьГруппуПоУмолчанию();
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Ответственный", Ответственный);
//	Если ЗначениеЗаполнено(Ответственный) Тогда
//		Письмо.Ответственный = Ответственный;
//	Иначе
//		Письмо.Ответственный = ТекущийПользователь;
//	КонецЕсли;
//	
//	//Если ТекущаяДата() > '20130608000000' Тогда
//	//	Возврат Неопределено;
//	//КонецЕсли;

//	СтруктураНовогоПисьма.Свойство("Кому", Кому);
//	Если ТипЗнч(Кому) = Тип("СписокЗначений") Тогда
//		Для каждого ЭлементСписка Из Кому Цикл
//			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
//				Продолжить;
//			КонецЕсли; 
//			СтрокаТЧ = Письмо.КомуТЧ.Добавить();
//			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
//			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
//			Если НЕ ПустаяСтрока(Письмо.Кому) Тогда
//				Письмо.Кому = Письмо.Кому + ", ";
//			КонецЕсли;
//			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
//				Письмо.Кому = Письмо.Кому + ЭлементСписка.Значение;
//			Иначе
//				Письмо.Кому = Письмо.Кому + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;

//	СтруктураНовогоПисьма.Свойство("Копии", Копии);
//	Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда
//		Для каждого ЭлементСписка Из Копии Цикл
//			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
//				Продолжить;
//			КонецЕсли; 
//			СтрокаТЧ = Письмо.КопииТЧ.Добавить();
//			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
//			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
//			Если НЕ ПустаяСтрока(Письмо.Копии) Тогда
//				Письмо.Копии = Письмо.Копии + ", ";
//			КонецЕсли;
//			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
//				Письмо.Копии = Письмо.Копии + ЭлементСписка.Значение;
//			Иначе
//				Письмо.Копии = Письмо.Копии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;

//	СтруктураНовогоПисьма.Свойство("СкрытыеКопии", СкрытыеКопии);
//	Если ТипЗнч(СкрытыеКопии) = Тип("СписокЗначений") Тогда
//		Для каждого ЭлементСписка Из СкрытыеКопии Цикл
//			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
//				Продолжить;
//			КонецЕсли;
//			СтрокаТЧ = Письмо.СкрытыеКопииТЧ.Добавить();
//			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
//			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
//			Если НЕ ПустаяСтрока(Письмо.СкрытыеКопии) Тогда
//				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ", ";
//			КонецЕсли;
//			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
//				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Значение;
//			Иначе
//				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	ФормаПисьма = Письмо.ПолучитьФорму();
//	
//	// Проставим при необходимости подпись
//	Если УчетнаяЗапись.ДобавлятьПодписьКИсходящимПисьмам Тогда
//	 
//		Отказ = Ложь;
//	
//		НовыйКом = Новый COMОбъект("HtmlFile");
//		НовыйКом.open("text/html");
//		НовыйКом.write(УчетнаяЗапись.ТекстПодписи);
//		НовыйКом.close();
//		
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			
//			ТекстПисьма = Письмо.ТекстПисьма;
//			
//			Если ПустаяСтрока(ТекстПисьма) Тогда
//				ТекстПисьма = "<HTML><HEAD>
//							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
//							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
//							  |<BODY><DIV></DIV></BODY></HTML>";
//			Иначе
//				Если Найти(ТекстПисьма, "<BODY") = 0 тогда
//				ТекстПисьма = "<HTML><HEAD>
//							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
//							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
//							  |<BODY>" + СтрЗаменить(ТекстПисьма, Символы.ПС, "<BR>") + "</BODY></HTML>";
//				КонецЕсли;
//			КонецЕсли;
//			
//			НачалоТела = Найти(ТекстПисьма, "<BODY");
//			КонецНачалаТела = 0;
//			а = НачалоТела;
//			Пока 1 = 1 Цикл
//				Если Сред(ТекстПисьма, а, 1) = ">" Тогда
//					КонецНачалаТела = а;
//					Прервать;
//				Иначе
//					а = а + 1;
//				КонецЕсли; 
//			КонецЦикла;
//			
//			Если НачалоТела = 0 ИЛИ КонецНачалаТела = 0 Тогда
//				Отказ = Истина;
//			КонецЕсли;
//			
//			ТегBODY = НовыйКом.all.Tags("BODY");
//			Если ТегBODY.length > 0 Тогда
//				ХТМЛПодписи = ТегBODY.item(0).innerHTML;
//				Если ПустаяСтрока(ХТМЛПодписи) Тогда
//					Отказ = Истина;
//				Иначе
//					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "<PRE>", "");
//					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "</PRE>", "<BR>");
//				КонецЕсли;
//			Иначе
//				Отказ = Истина;
//			КонецЕсли; 
//			
//			Если НЕ Отказ Тогда
//				Если ПодписьПодТекстом Тогда
//					НачалоКонцаТела = Найти(ТекстПисьма, "</BODY");
//					Если НачалоКонцаТела > 0 Тогда
//						НовыйТекстПисьма = Лев(ТекстПисьма, НачалоКонцаТела - 1);
//						НовыйТекстПисьма  = НовыйТекстПисьма + "<BR>" + ХТМЛПодписи + Сред(ТекстПисьма, НачалоКонцаТела);
//						Письмо.ТекстПисьма = НовыйТекстПисьма;
//					КонецЕсли;
//				Иначе
//					НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела);
//					НовыйТекстПисьма  = НовыйТекстПисьма + "<DIV>&nbsp;</DIV>" + ХТМЛПодписи + Сред(ТекстПисьма, (КонецНачалаТела + 1));
//					Письмо.ТекстПисьма = НовыйТекстПисьма;
//				КонецЕсли;
//			КонецЕсли;
//			
//		Иначе
//			
//			ТекстПодписи = Новый ТекстовыйДокумент;
//			ТекстПодписи.УстановитьТекст(СтрЗаменить(НовыйКом.all.item(0).innerText, Символ(13), ""));
//			
//			Если ТекстПодписи.КоличествоСтрок() > 0 Тогда
//				
//				НовыйТекстПисьма = Новый ТекстовыйДокумент;
//				НовыйТекстПисьма.УстановитьТекст(Письмо.ТекстПисьма);
//				
//				Если НовыйТекстПисьма.КоличествоСтрок() > 0 Тогда
//					ПерваяСтрока = НовыйТекстПисьма.ПолучитьСтроку(1);
//					Если ПустаяСтрока(ПерваяСтрока) Тогда
//						НовыйТекстПисьма.УдалитьСтроку(1);
//					КонецЕсли;
//				КонецЕсли;
//				
//				Для а = 1 По ТекстПодписи.КоличествоСтрок() Цикл
//					Если ПодписьПодТекстом Тогда
//						НовыйТекстПисьма.ДобавитьСтроку(ТекстПодписи.ПолучитьСтроку(а));
//					Иначе
//						НовыйТекстПисьма.ВставитьСтроку(а, ТекстПодписи.ПолучитьСтроку(а));
//					КонецЕсли;
//				КонецЦикла;
//				
//				НовыйТекстПисьма.ВставитьСтроку(1, "");
//				Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//	
//	КонецЕсли;
//	Письмо.СтатусПисьма=Перечисления.СтатусыПисем.Исходящее;
//	Если ОткрыватьПисьмо Тогда
//		
//		Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
//			
//			ЗначениеСтруктурыВозврата = Неопределено;
//			
//			Для каждого ЭлементСписка Из СписокФайловВложений Цикл
//				
//				НовоеВложение = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
//				
//				ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					Продолжить;
//				Иначе
//					Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
//						НовоеВложение.Данные = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
//					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
//						НовоеВложение.Данные = ЗначениеСтруктурыВозврата;
//					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
//						НовоеВложение.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
//					Иначе
//						Продолжить;
//					КонецЕсли;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					НовоеВложение.ИмяФайла = "";
//				Иначе
//					НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					НовоеВложение.Наименование = "";
//				Иначе
//					НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//		КонецЕсли;
//		
//		ФормаПисьма.Открыть();
//		
//		// Установим удобный элемент управления в форме письма - текущим
//		Если ТекущийЭлементХТМЛ Тогда
//			Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеHTMLДокумента;
//			Иначе
//				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеТекстовогоДокумента;
//			КонецЕсли;
//		Иначе
//			ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.Кому;
//		КонецЕсли;
//		
//		СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
//	
//	Иначе
//		
//		Попытка
//			Письмо.Записать();
//		Исключение
//			Возврат ОписаниеОшибки();
//		КонецПопытки;
//			
//		Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
//			
//			ЗначениеСтруктурыВозврата = Неопределено;
//			
//			Для каждого ЭлементСписка Из СписокФайловВложений Цикл
//			
//				НовоеВложение = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
//				НовоеВложение.Объект = Письмо.Ссылка;
//				
//				ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					Продолжить;
//				Иначе
//					Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
//						НовоеВложение.Хранилище = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
//					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
//						НовоеВложение.Хранилище = ЗначениеСтруктурыВозврата;
//					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
//						НовоеВложение.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
//					Иначе
//						Продолжить;
//					КонецЕсли;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					НовоеВложение.ИмяФайла = "";
//				Иначе
//					НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					НовоеВложение.Наименование = "";
//				Иначе
//					НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				Попытка
//					НовоеВложение.Записать();
//				Исключение
//					Возврат ОписаниеОшибки();
//				КонецПопытки;
//			
//			КонецЦикла;
//			
//		КонецЕсли;
//		
//		СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
//	
//	КонецЕсли;
//	
//	Возврат СтруктураВозврата;

//КонецФункции

//Функция ПолучитьДвоичныеДанные(ИмяФайла)

//	Файл = Новый Файл(ИмяФайла);
//	
//	Если Файл.Существует() Тогда
//		Данные = Новый ДвоичныеДанные(ИмяФайла);
//		Попытка
//			УдалитьФайлы(ИмяФайла);
//		Исключение
//		КонецПопытки;
//		Возврат Данные;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли; 
//	

//КонецФункции

//Функция СоздатьПисьмо(ТабДок,Исполнитель) Экспорт

//	мСоответствиеМесяцев=Новый Соответствие;
//	мСоответствиеМесяцев.Вставить("Январь","January");
//	мСоответствиеМесяцев.Вставить("Февраль","February");
//	мСоответствиеМесяцев.Вставить("Март","March");
//	мСоответствиеМесяцев.Вставить("Апрель","April");
//	мСоответствиеМесяцев.Вставить("Май","May");
//	мСоответствиеМесяцев.Вставить("Июнь","June");
//	мСоответствиеМесяцев.Вставить("Июль","July");
//	мСоответствиеМесяцев.Вставить("Август","August");
//	мСоответствиеМесяцев.Вставить("Сентябрь","September");
//	мСоответствиеМесяцев.Вставить("Октябрь","October");
//	мСоответствиеМесяцев.Вставить("Ноябрь","November");
//	мСоответствиеМесяцев.Вставить("Декабрь","December");
//	//МесяцАнгл= мСоответствиеМесяцев.Получить(Лев(СтрокаТабл.МесяцГод,СтрДлина(СтрокаТабл.МесяцГод)-5));
//	Адрес = "nikita.fedulov@srv.fi";
//	СотрудникНаименование = "Федулов";
//	СтруктураНовогоПисьма = Новый Структура;
//	Если НЕ ПустаяСтрока(Адрес) Тогда
//		СписокКому = Новый СписокЗначений;
//		СписокКому.Добавить(Адрес, СотрудникНаименование);
//		СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
//	КонецЕсли; 
//	ИмяФайлаВложения="Расчетный листок за "+СтрокаТабл.МесяцГод;
//	Тело = "Добрый день, ";
//	СтруктураНовогоПисьма.Вставить("Тело"     , Тело); 
//	СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
//	СтруктураНовогоПисьма.Вставить("Тема"     , ИмяФайлаВложения); 
//	//СписокФайловВложений = Новый СписокЗначений;
//	//ФайлВФорматеXLS = ПолучитьИмяВременногоФайла();
//	//ТабДок.Записать(ФайлВФорматеXLS, ТипФайлаТабличногоДокумента.XLS);
//	//СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", ПолучитьДвоичныеДанные(ФайлВФорматеXLS), (ИмяФайлаВложения + ".XLS"), ИмяФайлаВложения));
//	//СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
//	
//	СтруктураПисьма=НаписатьПисьмо(Исполнитель, СтруктураНовогоПисьма);
//    Возврат СтруктураПисьма.Письмо.Ссылка;
//КонецФункции

//Процедура ЗаписатьВТаблицуСотрудников(Сотрудник,МесяцГод,ОбластьРЛ,НомерСтрокиНачалаРЛ,НомерСтрокиКонцаРЛ);
//	СтрокаСотрудник=ТаблицаСотрудников.Добавить();
//	СтрокаСотрудник.Сотрудник=Сотрудник;
//	СтрокаСотрудник.МесяцГод=МесяцГод;
//	СтрокаСотрудник.Пометка=Истина;
//	СтрокаСотрудник.НачальнаяСтрока=НомерСтрокиНачалаРЛ;
//	СтрокаСотрудник.КонечнаяСтрока=НомерСтрокиКонцаРЛ;
//КонецПроцедуры

//Функция ПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(Объект) Экспорт

//	Запрос = Новый Запрос;
//	
//	Запрос.УстановитьПараметр("Объект", Объект);
//	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
//	//Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
//	
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	               |	КонтактнаяИнформация.Представление,
//	               |	КонтактнаяИнформация.Вид КАК Вид
//	               |ИЗ
//	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
//	               |ГДЕ
//	               |	КонтактнаяИнформация.Объект = &Объект
//	               |	И КонтактнаяИнформация.Тип = &Тип
//				   //|	И КонтактнаяИнформация.Вид = &Вид
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	КонтактнаяИнформация.Вид.Наименование";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат "";
//	Иначе
//		ПредставлениеАдресЭлектроннойПочты="";
//		ВыборкаДетали = РезультатЗапроса.Выбрать();
//		Пока ВыборкаДетали.Следующий() Цикл
//			ПредставлениеАдресЭлектроннойПочты=ВыборкаДетали.Представление;
//			Возврат ПредставлениеАдресЭлектроннойПочты;
//		КонецЦикла; 
//	КонецЕсли;

//КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

//Процедура СформироватьТаблицуСотрудников(ТабличныйДокумент,ДанныеРасшифровки) Экспорт
//	ТаблицаСотрудников.Очистить();
//	
//	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок");
//	
//	Если ОбластьПервойЯчейки = Неопределено тогда
//		Возврат;
//	КонецЕсли;
//	
//	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
//	НомерСтрокиНачалаРЛ = НомерСтрокиНачалаРЛ - 1;
//	
//	ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ");
//	НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
//	
//	ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
//	ИдентификаторРасшифровки=ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ+3,1 , НомерСтрокиНачалаРЛ+3,1 ).Расшифровка;
//	Сотрудник = ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки].ПолучитьПоля()[0].Значение;
//	МесяцГод=Сред(СокрЛП(ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ+1,1 , НомерСтрокиНачалаРЛ+1,1 ).Текст),СтрДлина("Расчетный листок за ")+1);
//	ЗаписатьВТаблицуСотрудников(Сотрудник,МесяцГод,ОбластьРЛ,НомерСтрокиНачалаРЛ,НомерСтрокиКонцаРЛ);
//	
//	ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
//	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
//	
//	Пока ОбластьПервойЯчейки <> Неопределено Цикл
//		
//		НомерСтрокиНачалаРЛ    = ОбластьПервойЯчейки.Верх - 1;
//		
//		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ, );
//		ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ", ОбластьСлед);
//		НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
//		
//		ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
//		
//		ИдентификаторРасшифровки=ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ+3,1 , НомерСтрокиНачалаРЛ+3,1 ).Расшифровка;
//		Сотрудник = ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки].ПолучитьПоля()[0].Значение;
//		
//		МесяцГод=Сред(СокрЛП(ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ+1,1 , НомерСтрокиНачалаРЛ+1,1 ).Текст),СтрДлина("Расчетный листок за ")+1);
//		ЗаписатьВТаблицуСотрудников(Сотрудник,МесяцГод,ОбластьРЛ,НомерСтрокиНачалаРЛ,НомерСтрокиКонцаРЛ);
//		
//		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
//		ОбластьПервойЯчейки    = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
//		
//	КонецЦикла;
//	ТаблицаСотрудников.Сортировать("Сотрудник");
//	Для каждого СтрокаТабл Из ТаблицаСотрудников Цикл
//		СтрокаТабл.Адрес=ПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(СтрокаТабл.Сотрудник.Физлицо);
//		Если ПустаяСтрока(СтрокаТабл.Адрес) Тогда
//			СтрокаТабл.Пометка=Ложь;	
//		КонецЕсли; 
//	КонецЦикла; 
//	
//КонецПроцедуры

//Процедура ОтправитьПисьма(Письма, СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Знач ПоказыватьОкноВыполнения = Истина, ТекстОшибок = "") Экспорт

//	Если ТипЗнч(Письма) <> Тип("Соответствие") Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	ИзмененныйСоставПисем = Новый Соответствие;
//	
//	ДоступныеУчетныеЗаписи = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь);
//	Для каждого Письмо Из Письма Цикл
//	
//		Если Письмо.Ключ.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ Письмо.Ключ.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
//			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, отправлять можно только сохраненные или исходящие письма.");
//			Продолжить;;
//		КонецЕсли;
//		
//		Если Письмо.Ключ.ПометкаУдаления Тогда
//			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, письмо помечено на удаление.");
//			Продолжить;
//		КонецЕсли;
//		
//		Если Письмо.Ключ.КомуТЧ.Количество() = 0 Тогда
//			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, не указан ни один получатель.");
//			Продолжить;
//		КонецЕсли;
//		
//		Если Не ЗначениеЗаполнено(Письмо.Ключ.УчетнаяЗапись) Тогда
//			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, не указана учетная запись.");
//			Продолжить;
//		КонецЕсли;
//		
//		Если ТипЗнч(Письмо.Значение) <> Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
//			ОбъектПисьмо = Письмо.Ключ.ПолучитьОбъект();
//			
//			ОбъектПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
//			Если Не ЗначениеЗаполнено(ОбъектПисьмо.Ответственный) Тогда
//				ОбъектПисьмо.Ответственный = ТекущийПользователь;
//			КонецЕсли; 
//		
//			Попытка
//				ОбъектПисьмо.Записать();
//			Исключение
//				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (СокрЛП(Письмо) + " исключено из списка отправки."));
//				Продолжить;;
//			КонецПопытки;
//		Иначе
//			Письмо.Значение.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
//			Если Не ЗначениеЗаполнено(Письмо.Значение.Ответственный) Тогда
//				Письмо.Значение.Ответственный = ТекущийПользователь;
//			КонецЕсли; 
//		КонецЕсли; 
//		
//		ИзмененныйСоставПисем.Вставить(Письмо.Ключ, Письмо.Значение);
//		
//	КонецЦикла;
//	
//	Если ИзмененныйСоставПисем.Количество() > 0 Тогда
//		ОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, , ИзмененныйСоставПисем, 
//			Истина, , ПоказыватьОкноВыполнения, ТекстОшибок);
//	КонецЕсли; 

//КонецПроцедуры


//// Процедура осуществляет транспорт писем
////
//// Параметры
////  СоответствиеТекстовЭлектронныхПисем - Соответствие, текстов писем и ДокументСсылка.ЭлектронноеПисьмо
////  ТекущийПользователь - СправочникСсылка.Пользователи, Текущий пользователь системы
////  МассивУчетныхЗаписей - Массив, учетные записи по которым необходимо осуществить транспорт
////  МассивПисем - Массив, документы ЭлектронноеПисьмо, которые необходимо отправить
////  Отправить - Булево, действие "отправить письма"
////  Получить - Булево, действие "получить письма"
////  ПоказыватьОкноВыполнения - Булево, показывать окно выполнения получения/отправки писем
////
//// Возвращаемое значение:
////   НЕТ
////
//Процедура ОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, МассивУчетныхЗаписей = Неопределено, 
//	Письма = Неопределено, Отправить = Ложь, Получить = Ложь, ПоказыватьОкноВыполнения = Истина, ТекстОшибок = "") Экспорт

//	Перем мРазделительАдресов;
//	
//	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
//		Сообщить("В настройках учета не установлено использование встроенного почтового клиента. Действие отправка/получение писем не выполнено.");
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли; 
//	
//	мРазделительАдресов = ",";
//	
//	СписокДоступныхУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;
//	
//	ТекстОшибок = "";
//	
//	Если ТипЗнч(Письма) = Тип("Соответствие") Тогда
//		МассивПисем = Новый Массив;
//		Для каждого ЭлементСоотсетствия Из Письма Цикл
//			МассивПисем.Добавить(ЭлементСоотсетствия.Ключ);
//		КонецЦикла;
//	КонецЕсли;
//	
//	// Получим сответствие всех учетных записей, по которым надо производить действия отправки и получения
//	СоответствиеУчетныхЗаписейВсего = Новый Соответствие;
//		
//	Если Отправить Тогда
//		
//		Запрос = Новый Запрос;
//		
//		// Дерево на отправку
//		Если Письма = Неопределено И МассивУчетныхЗаписей = Неопределено Тогда
//			
//			Запрос.УстановитьПараметр("Исходящее", Перечисления.СтатусыПисем.Исходящее);
//			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
//			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
//			|ИЗ
//			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
//			|ГДЕ
//			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
//			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
//			|	И Не ЭлектронноеПисьмо.ПометкаУдаления
//			|ИТОГИ ПО
//			|	УчетнаяЗапись";
//			
//			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//		ИначеЕсли ТипЗнч(МассивПисем) = Тип("Массив") И МассивУчетныхЗаписей = Неопределено Тогда
//			
//			Запрос.УстановитьПараметр("Исходящее"       , Перечисления.СтатусыПисем.Исходящее);
//			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
//			Запрос.УстановитьПараметр("СписокПисем"     , МассивПисем);
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
//			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
//			|ИЗ
//			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
//			|ГДЕ
//			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
//			|	И ЭлектронноеПисьмо.Ссылка В(&СписокПисем)
//			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
//			|ИТОГИ ПО
//			|	УчетнаяЗапись";
//			
//			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//		ИначеЕсли МассивПисем = Неопределено И ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
//			
//			Запрос.УстановитьПараметр("Исходящее", Перечисления.СтатусыПисем.Исходящее);
//			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
//			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
//			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
//			|ИЗ
//			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
//			|ГДЕ
//			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
//			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцевМассив)
//			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
//			|	И Не ЭлектронноеПисьмо.ПометкаУдаления
//			|ИТОГИ ПО
//			|	УчетнаяЗапись";
//			
//			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//		ИначеЕсли ТипЗнч(МассивПисем) = Тип("Массив") И ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
//			
//			Запрос.УстановитьПараметр("Исходящее"             , Перечисления.СтатусыПисем.Исходящее);
//			Запрос.УстановитьПараметр("СписокПисем"           , МассивПисем);
//			Запрос.УстановитьПараметр("СписокВладельцев"      , СписокДоступныхУчетныхЗаписей);
//			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
//			|	ЭлектронноеПисьмо.Ссылка КАК Письмо
//			|ИЗ
//			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
//			|ГДЕ
//			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
//			|	И ЭлектронноеПисьмо.Ссылка В(&СписокПисем)
//			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцевМассив)
//			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
//			|ИТОГИ ПО
//			|	УчетнаяЗапись";
//			
//			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//		Иначе
//			Возврат;
//		КонецЕсли;
//		
//		МассивУчетныхЗаписейОтправка = ДеревоУчетныхЗаписейИПисем.Строки.ВыгрузитьКолонку("УчетнаяЗапись");
//		Для каждого ЭлементМассива Из МассивУчетныхЗаписейОтправка Цикл
//			СоответствиеУчетныхЗаписейВсего.Вставить(ЭлементМассива, ЭлементМассива);
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	
//	// Определим те учетные записи, которые были заявлены во входящих параметрах
//	// и проверим их на возможность отправки, чтобы пользователю было понятно
//	// почему некоторые письма не отправились
//	
//	СоответствиеЗаявленныхУчетныхЗаписей = Новый Соответствие;
//	
//	Если ТипЗнч(МассивПисем) = Тип("Массив") Тогда
//		
//		Запрос = Новый Запрос;
//		
//		Запрос.УстановитьПараметр("Исходящее"             , Перечисления.СтатусыПисем.Исходящее);
//		Запрос.УстановитьПараметр("СписокПисем"           , МассивПисем);
//		Запрос.УстановитьПараметр("СписокВладельцев"      , СписокДоступныхУчетныхЗаписей);
//		Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//		|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
//		|ИЗ
//		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
//		|ГДЕ
//		|	ЭлектронноеПисьмо.Ссылка В(&СписокПисем)";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗапись);
//		КонецЦикла;
//	
//	КонецЕсли;
//	
//	Если ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
//		Для каждого ЭлементМассива Из МассивУчетныхЗаписей Цикл
//			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(ЭлементМассива, ЭлементМассива);
//		КонецЦикла;
//	КонецЕсли;
//	
//	#Если Клиент Тогда
//	// Пора показывать форму состояния отпарвки/получения
//	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикацииПроцессаПолученияОтправкиПисемЭлектроннойПочты",,"УникальнаяФорма");
//	ФормаПрогрессора.Задачи.Индексы.Добавить("Объект");
//	ФормаПрогрессора.Задачи.Очистить();
//	
//	Если ПоказыватьОкноВыполнения Тогда
//		// Выведем те учетные записи, которые не прошли по заявленным
//		Для каждого ЭлементСоответствия Из СоответствиеЗаявленныхУчетныхЗаписей Цикл
//			
//			Если СписокДоступныхУчетныхЗаписей.НайтиПоЗначению(ЭлементСоответствия.Ключ) = Неопределено Тогда
//				
//				ТекстОшибок = Символы.ПС + ТекстОшибок + ("Заявлена " + ЭлементСоответствия.Значение.Наименование + " <" + ЭлементСоответствия.Значение.АдресЭлектроннойПочты + ">" + " - нет прав доступа для записи электронных писем.");
//				
//				НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
//				НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
//				НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Отменено;
//					НоваяЗадача.Задача    = "Отправка";
//				
//				Продолжить;
//				
//			КонецЕсли;
//			
//			Если СоответствиеУчетныхЗаписейВсего.Получить(ЭлементСоответствия.Ключ) = Неопределено Тогда
//				НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
//				НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
//				НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Завершено;
//					НоваяЗадача.Задача    = "Отправка";
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		// Покажем в таблице значений учетные записи, по которым нет писем, но они должны обрабатываться, как обработанные
//		Если МассивУчетныхЗаписей = Неопределено Тогда
//			Для каждого ЭлементСписка Из СписокДоступныхУчетныхЗаписей Цикл
//				Если СоответствиеУчетныхЗаписейВсего.Получить(ЭлементСписка.Значение) = Неопределено И ФормаПрогрессора.Задачи.Найти(ЭлементСписка.Значение, "Объект") = Неопределено Тогда
//					НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
//					НоваяЗадача.Объект    = ЭлементСписка.Значение;
//					НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Завершено;
//						НоваяЗадача.Задача    = "Отправка";
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ФормаПрогрессора.Ошибки = "";
//	ФормаПрогрессора.КомментарийОбработкиДанных = "отправка писем электронной почты";
//	
//	#КонецЕсли
//	
//	Если СоответствиеУчетныхЗаписейВсего.Количество() > 0 Тогда
//		
//		#Если Клиент Тогда
//		Если ПоказыватьОкноВыполнения Тогда
//		
//			Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
//				НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
//				НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
//				НоваяЗадача.Состояние = Перечисления.СостоянияСобытий.Запланировано;
//					НоваяЗадача.Задача    = "Отправка";
//			КонецЦикла;
//		
//			ФормаПрогрессора.Открыть();
//			
//		КонецЕсли;
//		#КонецЕсли
//		
//		Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
//			
//			УчетнаяЗапись = ЭлементСоответствия.Значение;
//			
//			#Если Клиент Тогда
//			Если ПоказыватьОкноВыполнения Тогда
//				СтрокаТаблицыСостояния = ФормаПрогрессора.Задачи.Найти(УчетнаяЗапись, "Объект");
//			КонецЕсли;
//			
//			ФормаПрогрессора.Значение = 0;
//			ФормаПрогрессора.КомментарийЗначения = "Подключение к " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
//			#КонецЕсли
//			
//			// Пробуем подключиться
//			
//			Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
//			
//			Профиль.АдресСервераPOP3   	= Неопределено;
//			Профиль.ПользовательSMTP   	= ""; 
//			Профиль.Пользователь   	= ""; 
//			Профиль.ПарольSMTP         	= ""; 
//			Профиль.Пароль         	= ""; 
//            Профиль.ПортPOP3    = 0;
//			
//			ИнтернетПочта = Новый ИнтернетПочта;
//			
//			Попытка
//				ИнтернетПочта.Подключиться(Профиль);
//			Исключение
//				
//				ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
//				
//				#Если Клиент Тогда
//				Если ПоказыватьОкноВыполнения Тогда
//					СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Отменено;
//				КонецЕсли;
//				#КонецЕсли
//			
//				Продолжить;
//			КонецПопытки;
//			
//			// Сначала проверим отправку
//			Если Отправить Тогда
//			
//				#Если Клиент Тогда
//				ФормаПрогрессора.КомментарийЗначения = "Отправка сообщений " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
//				#КонецЕсли
//				
//				Если ТипЗнч(ДеревоУчетныхЗаписейИПисем) = Тип("ДеревоЗначений") Тогда
//				
//					СтрокаДереваУчетнойЗаписи = ДеревоУчетныхЗаписейИПисем.Строки.Найти(УчетнаяЗапись, "УчетнаяЗапись");
//					
//					Если СтрокаДереваУчетнойЗаписи <> Неопределено Тогда
//					
//						#Если Клиент Тогда
//						ФормаПрогрессора.МаксимальноеЗначение = СтрокаДереваУчетнойЗаписи.Строки.Количество();
//						ФормаПрогрессора.Значение = 0;
//						#КонецЕсли
//						
//						Для каждого СтрокаПисьма Из СтрокаДереваУчетнойЗаписи.Строки Цикл
//						
//							#Если Клиент Тогда
//							ФормаПрогрессора.Значение = СтрокаДереваУчетнойЗаписи.Строки.Индекс(СтрокаПисьма) + 1;
//							
//							Если ЗначениеЗаполнено(СтрокаПисьма.Письмо.ИмяФайлаРедактированияХТМЛТекста) Тогда
//								Сообщить("У письма " + СокрЛП(СтрокаПисьма.Письмо) + " не закончено редактирование текста внешним HTML редактором. Письмо не отправлено.");
//								Продолжить;
//							КонецЕсли;
//							#КонецЕсли
//						
//							ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
//							
//							Письмо = СтрокаПисьма.Письмо;
//							
//							Если ЗначениеЗаполнено(Письмо.КодировкаПисьма) Тогда
//								КодировкаСообщения = Письмо.КодировкаПисьма;
//							Иначе
//								КодировкаСообщения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
//								Если Не ЗначениеЗаполнено(КодировкаСообщения) Тогда
//									КодировкаСообщения = "utf-8";
//								КонецЕсли;
//							КонецЕсли;
//							
//							ПочтовоеСообщение.Кодировка = КодировкаСообщения;
//						
//							// Вложения
//							Запрос = Новый Запрос;
//							
//							Запрос.УстановитьПараметр("ВыбОбъект",		Письмо);
//							Запрос.УстановитьПараметр("ПустаяСтрока",	"");
//							
//							Запрос.Текст =
//							"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//							|	ВложенияЭлектронныхПисем.Ссылка КАК Ссылка,
//							|	ВложенияЭлектронныхПисем.Наименование КАК Наименование,
//							|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла,
//							|	ВложенияЭлектронныхПисем.Хранилище КАК ХранилищеЗначения
//							|ИЗ
//							|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
//							|ГДЕ
//							|	ВложенияЭлектронныхПисем.Объект = &ВыбОбъект
//							|	И ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = &ПустаяСтрока";
//							
//							Выборка = Запрос.Выполнить().Выбрать();
//							Пока Выборка.Следующий() Цикл
//								ИмяФайла = "";
//								Если НЕ ПустаяСтрока(Выборка.ИмяФайла) Тогда
//									ИмяФайла = Выборка.ИмяФайла;
//								ИначеЕсли НЕ ПустаяСтрока(Выборка.Наименование) Тогда
//									ИмяФайла = Выборка.Наименование;
//								КонецЕсли;
//								ДвоичныеДанные = Выборка.ХранилищеЗначения.Получить();
//								Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
//									ПочтовоеСообщение.Вложения.Добавить(Выборка.ХранилищеЗначения.Получить(), ИмяФайла);
//								КонецЕсли;
//							КонецЦикла;
//							
//							// Общие свойства письма
//							ПочтовоеСообщение.ИмяОтправителя  = Письмо.ОтправительИмя;
//							ПочтовоеСообщение.Отправитель     = Письмо.ОтправительАдресЭлектроннойПочты;
//							ПочтовоеСообщение.Тема            = Письмо.Тема;
//							
//							Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
//								Получатель = ПочтовоеСообщение.Получатели.Добавить();
//								Получатель.Адрес           = СтрокаТЧ.АдресЭлектроннойПочты;
//								Получатель.ОтображаемоеИмя = СтрокаТЧ.Представление;
//								Получатель.Кодировка       = КодировкаСообщения;
//							КонецЦикла;
//							Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
//								Копия = ПочтовоеСообщение.Копии.Добавить();
//								Копия.Адрес           = СтрокаТЧ.АдресЭлектроннойПочты;
//								Копия.ОтображаемоеИмя = СтрокаТЧ.Представление;
//								Копия.Кодировка       = КодировкаСообщения;
//							КонецЦикла;
//							Для каждого СтрокаТЧ Из Письмо.СкрытыеКопииТЧ Цикл
//								СлепаяКопия = ПочтовоеСообщение.СлепыеКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
//								СлепаяКопия.Адрес           = СтрокаТЧ.АдресЭлектроннойПочты;
//								СлепаяКопия.ОтображаемоеИмя = СтрокаТЧ.Представление;
//								СлепаяКопия.Кодировка       = КодировкаСообщения;
//							КонецЦикла;
//							
//							ТекстПисьмаИД = Письмо.ТекстПисьма;
//							ТекстСообщения = ПочтовоеСообщение.Тексты.Добавить();
//							ТекстСообщения.Кодировка = КодировкаСообщения;
//							Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//								ТекстСообщения.Текст     = УправлениеЭлектроннойПочтой.ПропарситьHTMLИДВ_ТекстКартинки(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьмаИД);
//								ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
//							ИначеЕсли Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Тогда
//								ТекстСообщения.Текст     = ТекстПисьмаИД;
//								ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
//							Иначе
//								ТекстСообщения.Текст     = ТекстПисьмаИД;
//								ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
//							КонецЕсли;
//							
//							Попытка
//								
//								ИнтернетПочта.Послать(ПочтовоеСообщение);
//								
//								Если (Письма <> Неопределено) И (Письма.Получить(Письмо) <> Неопределено) Тогда
//									Письма[Письмо].СтатусПисьма			= Перечисления.СтатусыПисем.Отправленное;
//									Письма[Письмо].ДатаТранспорта		= ТекущаяДата();
//									Письма[Письмо].ДатаОтправления		= ТекущаяДата();
//									Письма[Письмо].ИдентификаторПисьма	= ПочтовоеСообщение.ИдентификаторСообщения;
//									
//									ОчиститьПисьмо(ПочтовоеСообщение);
//								
//									Письма[Письмо].ПочтовоеСообщение = Новый ХранилищеЗначения(ПочтовоеСообщение, Новый СжатиеДанных());
//									
//									Попытка
//										Письма[Письмо].Записать();
//									Исключение
//									КонецПопытки;
//								Иначе
//									ОбъектПисьмо = Письмо.ПолучитьОбъект();
//									ОбъектПисьмо.СтатусПисьма			= Перечисления.СтатусыПисем.Отправленное;
//									ОбъектПисьмо.ДатаТранспорта			= ТекущаяДата();
//									ОбъектПисьмо.ДатаОтправления		= ТекущаяДата();
//									ОбъектПисьмо.ИдентификаторПисьма	= ПочтовоеСообщение.ИдентификаторСообщения;
//									
//									ОчиститьПисьмо(ПочтовоеСообщение);
//								
//									ОбъектПисьмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ПочтовоеСообщение, Новый СжатиеДанных());
//									
//									Попытка
//										ОбъектПисьмо.Записать();
//									Исключение
//									КонецПопытки;
//								КонецЕсли;
//								
//							Исключение
//								
//								ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
//								
//								#Если Клиент Тогда
//								Если ПоказыватьОкноВыполнения Тогда
//									СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Отменено;
//								КонецЕсли;
//								#КонецЕсли
//								
//								Продолжить;
//								
//							КонецПопытки;
//							
//						КонецЦикла;
//					
//					КонецЕсли;
//				
//				КонецЕсли;
//			
//			КонецЕсли;
//			
//			КоличествоНовыхПисем = 0;
//			
//			ИнтернетПочта.Отключиться();
//			
//			#Если Клиент Тогда
//			Если ПоказыватьОкноВыполнения Тогда
//				Если СтрокаТаблицыСостояния.Состояние <> Перечисления.СостоянияСобытий.Отменено Тогда
//					СтрокаТаблицыСостояния.Состояние = Перечисления.СостоянияСобытий.Завершено;
//				КонецЕсли;
//			КонецЕсли;
//			#КонецЕсли
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	#Если Клиент Тогда
//	Если ПоказыватьОкноВыполнения Тогда
//		
//		ФормаПрогрессора.Ошибки = СокрЛП(ТекстОшибок);
//		
//		Если НЕ ФормаПрогрессора.Открыта() Тогда
//			ФормаПрогрессора.Открыть();
//		КонецЕсли;
//		
//		Если ПустаяСтрока(ФормаПрогрессора.Ошибки) Тогда
//			ФормаПрогрессора.Закрыть();
//		Иначе
//			ФормаПрогрессора.КомментарийЗначения = "Задачи завершены с ошибками";
//			ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.Страницы.Ошибки.Заголовок = "Ошибки(!)";
//			ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.ТекущаяСтраница = ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.Страницы.Ошибки;
//		КонецЕсли;
//		
//	КонецЕсли;
//	#КонецЕсли
//	
//КонецПроцедуры

//// Функция очищает от данных объект ИнтернетПисьмо, перед его сохранением в документе ЭлектронноеПисьмо
////
//// Параметры
////  Письмо - ИнтернетПисьмо
////
//// Возвращаемое значение:
////   НЕТ
////
//Процедура ОчиститьПисьмо(Письмо)

//	Письмо.Вложения.Очистить();
//	Письмо.Копии.Очистить();
//	Письмо.Получатели.Очистить();
//	Письмо.СлепыеКопии.Очистить();

//КонецПроцедуры

Процедура тест1()
///авпоадплод
//апдлвадпл
КонецПроцедуры

Процедура тест2()
///123123456
КонецПроцедуры


