&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//отбор по заявителю
	ТекЗаявитель = Справочники.Заявители.НайтиПоНаименованию(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ТекИсполнитель = Справочники.Исполнители.НайтиПоНаименованию(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Если ЗначениеЗаполнено(ТекИсполнитель) Тогда
		ЭтаФорма.Исполнитель = ТекИсполнитель;
	ИначеЕсли ЗначениеЗаполнено(ТекЗаявитель) Тогда
		ЭтаФорма.Заявитель = ТекЗаявитель;
	КонецЕсли;
	
	УстановитьОтбор();	
	
КонецПроцедуры

&НаКлиенте
Процедура Статус1ПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура Заявитель1Очистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор()
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура Статус1Очистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура Отчет(Команда)
	//ОтчетНаСервере();
	
	ОткрытьФорму("Отчет.ОтчетПоЗаявкамНовый.Форма.ФормаОтчета"); 
	
КонецПроцедуры






&НаКлиенте
Процедура ПоказыватьВсе(Команда)
	ПоказыватьВыполненныеЗадачи = ?(ПоказыватьВыполненныеЗадачи = Истина, Ложь, Истина);
	УстановитьОтбор();
	
	ЭтаФорма.Элементы.ФормаСкрытьВыполненные.Заголовок = ?(ПоказыватьВыполненныеЗадачи, "Скрыть выполненные", "Показывать все");
КонецПроцедуры

Процедура УстановитьОтбор()
	Список.Отбор.Элементы.Очистить();
	
	//по статусу
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		//кнопка
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЗаявок.Отменена);
		МассивСтатусов.Добавить(Перечисления.СтатусыЗаявок.Закрыта);
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");	
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
		ЭлементОтбора.Использование  = НЕ ПоказыватьВыполненныеЗадачи;
		ЭлементОтбора.ПравоеЗначение = МассивСтатусов;
		ЭлементОтбора.Представление  = "";
	Иначе
		//отбор
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
		ЭлементОтбора.Использование = ЗначениеЗаполнено(ЭтаФорма.Статус);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Статус;
	КонецЕсли;
	
	// и по заявителю
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заявитель");
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ЭтаФорма.Заявитель);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Заявитель;
	
	// и по исполнителю
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ЭтаФорма.Исполнитель);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Исполнитель;

КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОтображенияЗадачВРаботе()
	
	//Выделение выполненых задач
	ВыделениеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	ВыделениеУсловноеОформление.Использование  = Истина;
	
	ЭлементОтбора = ВыделениеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыЗаявок.ВРаботе;
	ЭлементОтбора.Представление  = "";
	
	ЦветТекста = Новый ПолеКомпоновкиДанных("ЦветФона");
	ОформлениеЦветТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ЦветТекста);
	ОформлениеЦветТекста.Использование = Истина;
	Если ОформлениеЦветТекста = Неопределено Тогда
		ОформлениеЦветТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеЦветТекста.Параметр = ЦветТекста;
	КонецЕсли;
	ОформлениеЦветТекста.Значение = Новый Цвет(255, 250, 205);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОтображенияЗадачВОжиданииИнформацииЗаявителя()
	
	//Выделение выполненых задач
	ВыделениеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	ВыделениеУсловноеОформление.Использование  = Истина;
	
	ЭлементОтбора = ВыделениеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыЗаявок.ВОжиданииИнформацииЗаявителя;
	ЭлементОтбора.Представление  = "";
	
	ЦветТекста = Новый ПолеКомпоновкиДанных("ЦветФона");
	ОформлениеЦветТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ЦветТекста);
	ОформлениеЦветТекста.Использование = Истина;
	Если ОформлениеЦветТекста = Неопределено Тогда
		ОформлениеЦветТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеЦветТекста.Параметр = ЦветТекста;
	КонецЕсли;
	ОформлениеЦветТекста.Значение = Новый Цвет(0, 250, 154);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОтображенияВыполненыхЗадач()
	
	//Выделение выполненых задач
	ВыделениеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	ВыделениеУсловноеОформление.Использование  = Истина;
	
	ЭлементОтбора = ВыделениеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыЗаявок.Закрыта;
	ЭлементОтбора.Представление  = "";
	
	ЦветТекста = Новый ПолеКомпоновкиДанных("ЦветТекста");
	ОформлениеЦветТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ЦветТекста);
	ОформлениеЦветТекста.Использование = Истина;
	Если ОформлениеЦветТекста = Неопределено Тогда
		ОформлениеЦветТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеЦветТекста.Параметр = ЦветТекста;
	КонецЕсли;
	ОформлениеЦветТекста.Значение = ЦветаСтиля.ЦветРамки;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОтображенияОтмененныхЗадач()
	//Выделение отмененных
	ВыделениеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	ВыделениеУсловноеОформление.Использование  = Истина;
	
	ЭлементОтбора = ВыделениеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыЗаявок.Отменена;
	ЭлементОтбора.Представление  = "";
	
	ЦветУсловноеОформление = ЦветаСтиля.ЦветРамки;
	мЗачеркнутыйШрифт		= Новый Шрифт(,,,,,Истина);
	
	ЦветТекста = Новый ПолеКомпоновкиДанных("ЦветТекста");
	ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ЦветТекста);
	ОформлениеТекста.Использование = Истина;
	Если ОформлениеТекста = Неопределено Тогда
		ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеТекста.Параметр = ЦветТекста;
	КонецЕсли;
	ОформлениеТекста.Значение = ЦветУсловноеОформление;
	
	ШрифтТекста = Новый ПолеКомпоновкиДанных("Шрифт");
	ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ШрифтТекста);
	ОформлениеТекста.Использование = Истина;
	Если ОформлениеТекста = Неопределено Тогда
		ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеТекста.Параметр = ШрифтТекста;
	КонецЕсли;
	ОформлениеТекста.Значение = мЗачеркнутыйШрифт;
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОтображенияПомеченныхНаУдаление()
	//Выделение помеченных на удаление
	ВыделениеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	ВыделениеУсловноеОформление.Использование  = Истина;
	
	ЭлементОтбора = ВыделениеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Представление  = "";
	
	ЦветУсловноеОформление = ЦветаСтиля.ЦветРамки;
	мЗачеркнутыйШрифт		= Новый Шрифт(,,,,,Истина);
	
	ЦветТекста = Новый ПолеКомпоновкиДанных("ЦветТекста");
	ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ЦветТекста);
	ОформлениеТекста.Использование = Истина;
	Если ОформлениеТекста = Неопределено Тогда
		ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеТекста.Параметр = ЦветТекста;
	КонецЕсли;
	ОформлениеТекста.Значение = ЦветУсловноеОформление;
	
	ШрифтТекста = Новый ПолеКомпоновкиДанных("Шрифт");
	ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Найти(ШрифтТекста);
	ОформлениеТекста.Использование = Истина;
	Если ОформлениеТекста = Неопределено Тогда
		ОформлениеТекста = ВыделениеУсловноеОформление.Оформление.Элементы.Добавить();
		ОформлениеТекста.Параметр = ШрифтТекста;
	КонецЕсли;
	ОформлениеТекста.Значение = мЗачеркнутыйШрифт;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтбор();
	УстановитьУсловноеОформлениеОтображенияЗадачВРаботе();
	УстановитьУсловноеОформлениеОтображенияЗадачВОжиданииИнформацииЗаявителя();
	УстановитьУсловноеОформлениеОтображенияВыполненыхЗадач();
	УстановитьУсловноеОформлениеОтображенияОтмененныхЗадач();
	УстановитьУсловноеОформлениеОтображенияПомеченныхНаУдаление();
КонецПроцедуры



